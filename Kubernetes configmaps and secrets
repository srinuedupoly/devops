ConfigMaps are a useful tool for managing configuration in a Kubernetes environment, providing a flexible and scalable way to handle configuration data separately from application code. They help in maintaining a clean separation between configuration and code, making it easier to manage and version configuration settings.

configmaps:

apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  nginx.conf: |
    server {
        listen 80;
        server_name localhost;
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx-container
        image: nginx:latest
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config-volume
          mountPath: /etc/nginx/conf.d
      volumes:
      - name: nginx-config-volume
        configMap:
          name: nginx-config
============================================================

Secrets
-------

In Kubernetes, Secrets are a way to store and manage sensitive information, such as authentication tokens, passwords, and other confidential data. Secrets provide a secure means of distributing and managing such information within the cluster. Like ConfigMaps, Secrets are also a type of Kubernetes resource, but they are specifically designed to handle sensitive data.

Types of Secrets:

Kubernetes supports several types of secrets, including generic secrets, TLS secrets, and Docker registry secrets.
Generic secrets store arbitrary key-value pairs.
TLS secrets are used for storing TLS certificates and private keys.
Docker registry secrets store credentials for pulling images from private container registries.

echo -n "srinu" | base64 --> Command to encode plain text


secrets

apiVersion: v1
kind: Secret
metadata:
  name: nginx-secrets
type: Opaque
data:
  nginx-user: "c3JpbnU="
  nginx-password: "c3JpbnUxMjM="

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx-container
        image: nginx:latest
        ports:
        - containerPort: 80
        env:
        - name: NGINX_USER
          valueFrom:
            secretKeyRef:
              name: nginx-secrets
              key: nginx-user
        - name: NGINX_PASSWORD
          valueFrom:
            secretKeyRef:
              name: nginx-secrets
              key: nginx-password


